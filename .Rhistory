install.packages("devtools")
find.package("devtools")
q()
library(devtools)
find_rtools()
q()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Kalyan")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!", sep = " ")
paste(1:3,c("x","y","z"), sep = "")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x *3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
ma_na
my_na
my_data
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c( foo=11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) < c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matri(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames()
colnames(my_data) <- cnames
my_data
q()
cube <- function (x,n) {}
cube <- function (x,n) {
x^3
}
cube(3)
hello <- function (x,n) {
x^3
}
hello(3)
hello(2)
x <- 1:10
if (x>5) {x <- 0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
! ( 5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num =  5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate (function(x){x+1},6)
evaluate (function(x){x[1]},c(8,4,0))
evaluate (function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Hehehe")
submit()
mad_libs(c(place = "Chennai", adjective = "heat", noun = "road"))
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shaped <- flags[,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class, character(1))
?tapply
?table
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
data(c"cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y= cars$dist)
plot(y= cars$speed, x= cars$dist)
plot(x= cars$speed, y= cars$dist, xlab="Speed")
plot(x= cars$speed, y= cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x= cars$speed, y= cars$dist,ylab="Stopping Distance")
plot(x= cars$speed, y= cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch =2
)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
library(datasets)
data("iris")
?iris
summary(iris)
str(iris)
head(iris)
iris[iris$Sepal.Length,iris$Species == "virginica"]
iris[,iris$Species == "virginica"]
iris[iris$Species == "virginica",]
iris[iris$Species == "virginica",iris$Sepal.Length]
iris[iris$Species == "virginica",1]
iris[iris$Species == "virginica","Sepal.Length"]
mean(iris[iris$Species == "virginica","Sepal.Length"])
colMeans(iris)
apply(iris[,1:4],2,mean)
library(datasets)
data("mtcars")
str(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars$mpg,mtcars$cyl)
tapply(mtcars$hp,mtcars$cyl,mean)
x <- tapply(mtcars$hp,mtcars$cyl,mean)
x
x[3] - x[1]
debug(ls)
ls
?debug
n
ls()
with(mtcars, tapply(mpg, cyl, mean))
Q
asd
undebug(ls)
Q
Q
setwd("GitHub/ProgrammingAssignment2/")
